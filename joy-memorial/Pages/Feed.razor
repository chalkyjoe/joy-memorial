@using joy_database.Repositories
@using joy_database.Models
@using Ganss.Xss
@page "/feed/{CategoryId:guid}"
@using Blazored.Video
@using Blazored.Video.Support
@attribute [Authorize( Roles = "Privileged" )]
@inject StoryRepository StoryRepository
@inject CategoryRepository CategoryRepository
<div class="main-content">
    <h3>@category.Name</h3>

    @foreach ( var story in stories )
    {
        <div class="story">
            <AuthorizeView>
                <Authorized>
                    @if ( context.User.IsInRole( "Admin" ) )
                    {
                        <div class="buttons">
                            <button class="btn-danger" @onclick="( ) => Delete( story.Id )">
                                <span class="oi oi-trash"></span>
                            </button>
                        </div>
                    }
                </Authorized>
            </AuthorizeView>
            <div class="story-header">
                <strong>@story.Name</strong>
                <div>@story.Created.ToString( "dd/MM/yyyy" )</div>
            </div>
            <div class="story-text">
                @( (MarkupString)new HtmlSanitizer().Sanitize( story.Text ) )
            </div>
            <div class="story-media">
                @foreach ( var media in story.Media )
                {
                    <div class="media-container">
                        @if ( media.Type == MediaType.Image )
                        {
                            <img src="@media.Filename" class="story-image" @onclick="( ) => ShowMedia( media.Filename, MediaType.Image )"/>
                        }
                        else if ( media.Type == MediaType.Video )
                        {
                            <div class="video-overlay" @onclick="( ) => ShowMedia( media.Filename, MediaType.Video )">
                                <span class="oi oi-media-play video-icon"></span>
                            </div>
                            <BlazoredVideo
                                class="story-image">
                                <source src="@media.Filename" type="video/mp4"/>
                            </BlazoredVideo>
                        }
                        else if ( media.Type == MediaType.Youtube )
                        {
                            <div class="media-container">
                                <div class="video-overlay" @onclick="( ) => ShowMedia( media.Filename, MediaType.Youtube )">
                                    <span class="oi oi-media-play video-icon"></span>
                                </div>
                                <img class="story-image" src="https://img.youtube.com/vi/@media.Filename/1.jpg">
                            </div>
                        }
                        else if ( media.Type == MediaType.Audio )
                        {
                            <div class="media-container">
                                <button class="audio-button" @onclick="( ) => ShowMedia(media.Filename, MediaType.Audio )"><span class="audio-icon oi oi-audio-spectrum"></span>@media.Name</button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>
<div class="lightbox-container @( ShowLightbox ? "" : "hidden" )">
    <div class="lightbox-background" @onclick="HideLightbox"></div>
    <div class="lightbox">
        @if ( SelectedMediaType == MediaType.Image )
        {
            <img src="@SelectedMedia"/>
        }
        else if ( SelectedMediaType == MediaType.Video )
        {
            <BlazoredVideo controls="controls">
                <source src="@SelectedMedia" type="video/mp4"/>
            </BlazoredVideo>
        }
        else if ( SelectedMediaType == MediaType.Youtube )
        {
            <iframe width="560" height="315" src="https://www.youtube.com/embed/@SelectedMedia" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
        }
        else if ( SelectedMediaType == MediaType.Audio )
        {
            <audio controls id="@SelectedMedia" src="@SelectedMedia"></audio>
        }
    </div>
</div>

@code {
    private List<Story> stories = new List<Story>();
    private Category category = new Category();
    private string SelectedMedia { get; set; }
    private MediaType SelectedMediaType { get ; set ; }
    private bool ShowLightbox { get; set; }
    [Parameter] public Guid CategoryId { get; set; }

    protected override async Task OnInitializedAsync( )
    {
        category = await CategoryRepository.Get( CategoryId );
        stories = await StoryRepository.GetAllApproved( CategoryId );
    }

    private async Task Delete( Guid storyId )
    {
        var story = stories.FirstOrDefault( m => m.Id == storyId );
        await StoryRepository.Delete( storyId );
        foreach ( var media in story.Media )
        {
            File.Delete( media.Filename );
        }

        stories = await StoryRepository.GetAllApproved( CategoryId );
    }

    private void ShowMedia( string filename, MediaType mediaType )
    {
        SelectedMedia = filename;
        SelectedMediaType = mediaType;
        ShowLightbox = true;
    }


    private void HideLightbox( )
    {
        ShowLightbox = false;
        SelectedMediaType = MediaType.None;
        SelectedMedia = string.Empty;
    }

}


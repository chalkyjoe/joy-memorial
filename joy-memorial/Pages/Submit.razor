@page "/submit"
@using joy_database.Models
@using joy_database.Repositories
@using System.ComponentModel.DataAnnotations

@inject StoryRepository _storyRepository


<h3>Blazor Form Example</h3>

@if (formSubmitted)
{
    <p>Form submitted successfully!</p>
}

<EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" @bind-Value="@formData.Name" class="form-control"/>
        <ValidationMessage For="@(() => formData.Name)"/>
    </div>

    <div class="form-group">
        <label for="Text">Text:</label>
        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>
            </EditorContent>
        </BlazoredTextEditor>
        <ValidationMessage For="@(() => formData.Text)"/>
    </div>
    <div>
        Upload video:
        <InputFile accept=".mp4,.mpeg,.avi,.mov,.wmv" multiple="true" OnChange="VideosUpload"></InputFile>
    </div>
    <div>
        Upload image:
        <InputFile accept=".jpg,.jpeg,.png,.gif,.bmp" multiple="true" OnChange="ImagesUpload"></InputFile>
    </div>
    <button type="button" class="btn btn-primary" @onclick="() => HandleValidSubmit()" disabled="@isSubmitting">
        @if (isSubmitting)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <p>Submitting...</p>
        }
        else
        {
            <p>Submit</p>
        }
    </button>
</EditForm>

@code {

    private class FormData
    {
        [Required]
        public string Name { get; set; }

        public string Text { get; set; }

        public List<IBrowserFile> ImageFiles { get; set; } = new List<IBrowserFile>();
        public List<IBrowserFile> VideoFiles { get; set; } = new List<IBrowserFile>();
    }

    private FormData formData = new FormData();
    private bool formSubmitted = false;

    private async Task HandleValidSubmit()
    {
        var filenames = await UploadFiles();
        var story = new Story()
        {
            Name = formData.Name,
            Text = await QuillHtml.GetHTML(),
            Media = filenames.Select(m => new Media
            {
                Filename = m
            }).ToList()
        };
        await _storyRepository.Create(story);
        formSubmitted = true;
    }

    private async Task<IEnumerable<string>> UploadFiles()
    {
        if (isSubmitting)
        {
        // Submission is already in progress, do not proceed
            return new List<string>();
        }

        // Set the flag to indicate submission is in progress
        isSubmitting = true;
        var filename = await SaveFiles( formData.ImageFiles );
        // Access form data, including the uploaded file (formData.File)
        // Handle the submission logic, e.g., save to the database or process the file
        Console.WriteLine($"Name: {formData.Name}, Text: {formData.Text}");
        isSubmitting = false;
        return filename;
    }

    private async Task<IEnumerable<string>> SaveFiles(IEnumerable<IBrowserFile> files)
    {
    // Specify the path where you want to save the file on the server
        var uploadsFolder = Path.Combine("wwwroot", "uploads"); // adjust as needed
        var filenames = new List<string>();
        foreach (var file in files)
        {
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(uploadsFolder, fileName);

    // Create the uploads folder if it doesn't exist
            Directory.CreateDirectory(uploadsFolder);
    // Copy the file content to the server
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            filenames.Add("uploads/" + fileName);
        }
        return filenames;
    }

    public BlazoredTextEditor QuillHtml { get; set; }
    private void VideosUpload(InputFileChangeEventArgs obj)
    {
        formData.VideoFiles = new List<IBrowserFile>();
        formData.VideoFiles.AddRange(obj.GetMultipleFiles());
    }
    private void ImagesUpload(InputFileChangeEventArgs obj)
    {
        formData.ImageFiles = new List<IBrowserFile>();
        formData.ImageFiles.AddRange(obj.GetMultipleFiles());
    }

    public bool isSubmitting { get; set; }

}
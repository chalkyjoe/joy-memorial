@using joy_database.Repositories
@using joy_database.Models
@using Ganss.Xss
@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using Blazored.Video
@using Blazored.Video.Support
@inject StoryRepository StoryRepository

<h3>Story Feed</h3>

@foreach (var story in stories)
{
    <div class="story">
        <div class="story-header">
            <strong>@story.Name</strong>
            <div>
                @story.Category.Name
            </div>
        </div>
        <div class="story-text">
            <div class="buttons">
                <button class="btn-approve btn-success" @onclick="() => Approve(story)"><span class="oi oi-check"></span></button>
                <button class="btn-danger" @onclick="() => Delete(story.Id)"><span class="oi oi-trash"></span></button>
                
            </div>
            @((MarkupString)new HtmlSanitizer().Sanitize(story.Text))
            @foreach (var media in story.Media)
            {
                @if (media.Type == MediaType.Image)
                {
                    <img src="@media.Filename" height="300" @onclick="( ) => ShowImage(media.Filename)"/>
                }
                else if (media.Type == MediaType.Video)
                {
                    <BlazoredVideo
                        style="height:300px;"
                        controls="controls">
                        <source src="@media.Filename" type="video/mp4"/>
                    </BlazoredVideo>
                }
            }
        </div>
    </div>
    <div class="lightbox-container @( ShowLightbox ? "" : "hidden" )">
        <div class="lightbox-background" @onclick="HideLightbox"></div>
        <div class="lightbox">
            <img src="@SelectedImage"/>
        </div>
    </div>

}

@code {
    private List<Story> stories = new List<Story>();
    private string SelectedImage { get; set; }
    private bool ShowLightbox { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetStories();
    }

    private async Task GetStories()
    {
        var tempStories = await StoryRepository.GetAllUnApproved();
        if (tempStories != null)
            stories = tempStories;
    }

    private async Task Approve(Story story)
    {
        await StoryRepository.Approve(story);
        await GetStories();
    }

    private async Task Delete(Guid storyId)
    {
        var story = stories.FirstOrDefault(m => m.Id == storyId);
        await StoryRepository.Delete(storyId);
        foreach (var media in story.Media)
        {
            File.Delete("wwwroot/" + media.Filename);
        }
        stories = await StoryRepository.GetAllUnApproved();
    }

    private void ShowImage( string filename )
    {
        SelectedImage = filename;
        ShowLightbox = true;
    }

    private void HideLightbox( )
    {
        ShowLightbox = false;
    }

}